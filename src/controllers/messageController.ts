import { Client, Message, MessageMedia } from 'whatsapp-web.js';
import { Usuario, Blacklist, Attempt, UserType, AuditContext, Auditoria } from '../database/models';
import { openDoor } from '../services/doorService';
import { AppDataSource } from '../database';
import { getGateSnapshot, getFrontDoorSnapshot, getFrontDoorClip } from '../services/cameraService';
import { createUserManual, listUsers, updateUser, deleteUser, listBlacklist, removeFromBlacklist, updateUserPhone, searchUsers } from '../services/userService';
import { createAudit } from '../services/auditService';
import { globalMutex } from '../utils/concurrency';
import { audit } from '../utils/logger';

const MENU_TRIGGER_REGEX = /^(men[u√∫]|Men[u√∫]|MEN[u√ö])$/;
const ATTEMPT_THRESHOLD = 10;
const AUDIT_CONTEXT_TIMEOUT_MS = 5 * 60 * 1000; // 5 min

// --- Ephemeral states (no persistence needed) ---
const blacklistMenuAdmins = new Set<string>();
const blacklistRemovalAwait = new Set<string>();
const auditMenuActive = new Set<string>();
const userMenuAdmins = new Set<string>();

// Estados interactivos de gesti√≥n de usuarios
interface CreateUserState { step: 1|2|3; numero?: string; nombre?: string; }
interface UpdateUserState { phase: 'askNumero' | 'attrMenu' | 'attrValue' | 'attrPhone'; numero?: string; attr?: 'nombre' | 'rol' | 'activo' | 'telefono'; }
interface DeleteUserState { step: 1|2; numero?: string; }
interface SearchUserState { phase: 'askQuery'; }
const createUserStates = new Map<string, CreateUserState>();
const updateUserStates = new Map<string, UpdateUserState>();
const deleteUserStates = new Map<string, DeleteUserState>();
const searchUserStates = new Map<string, SearchUserState>();

// ---- Audit Context helpers ----
async function getOrCreateAuditCtx(adminNumero: string) {
  const repo = AppDataSource.getRepository(AuditContext);
  let ctx = await repo.findOneBy({ adminNumeroWhatsapp: adminNumero });
  if (!ctx) {
    ctx = repo.create({ adminNumeroWhatsapp: adminNumero, offset: 0, lastInteraction: new Date() as any, awaitingFilter: false });
    await repo.save(ctx);
  }
  return ctx;
}
async function updateAuditCtx(ctx: AuditContext, changes: Partial<AuditContext>) {
  const repo = AppDataSource.getRepository(AuditContext);
  Object.assign(ctx, changes, { lastInteraction: new Date() as any });
  await repo.save(ctx);
}
async function expireOldAuditCtx() {
  const repo = AppDataSource.getRepository(AuditContext);
  const all = await repo.find();
  const now = Date.now();
  for (const c of all) {
    if (c.lastInteraction && now - new Date(c.lastInteraction).getTime() > AUDIT_CONTEXT_TIMEOUT_MS) {
      await repo.remove(c);
    }
  }
}

// ---- Menus ----
function buildMenu(isAdmin: boolean) {
  const lines = [
    'üìã *Men√∫ Principal*',
    '',
    '1Ô∏è‚É£  Abrir port√≥n visitas üöó',
    '2Ô∏è‚É£  Abrir port√≥n peatonal üö∂',
    '3Ô∏è‚É£  Mostrar port√≥n visitas üñºÔ∏è',
    '4Ô∏è‚É£  Mostrar port√≥n peatonal üñºÔ∏è',
    '5Ô∏è‚É£  Estatus del sistema üìä',
  ];
  if (isAdmin) {
    lines.push('6Ô∏è‚É£  Gesti√≥n de usuarios üë§');
    lines.push('7Ô∏è‚É£  Auditor√≠a üìú');
  lines.push('8Ô∏è‚É£  Blacklist üö´');
  lines.push('9Ô∏è‚É£  Snapshot c√°mara frontal üñºÔ∏è');
  lines.push('üîü  Video 30s c√°mara frontal üé•');
  }
  lines.push('', 'Responde con el n√∫mero de la opci√≥n.');
  return lines.join('\n');
}
function buildUserAdminHelp() {
  return [
    'üë§ *Gesti√≥n de Usuarios*',
    '',
    'Comandos:',
    '!usuario alta <numero> <nombre> <admin|normal>',
    '!usuario listar',
    '!usuario actualizar <numero> [nombre=Nuevo Nombre] [rol=admin|normal] [activo=true|false]',
    '!usuario borrar <numero>',
    '',
    'Blacklist:',
    '!blacklist listar',
    '!blacklist remover <numero>'
  ].join('\n');
}
function buildAuditMenu(ctx?: AuditContext) {
  const filterInfo = ctx?.filterNumeroWhatsapp ? ` (Filtro: ${ctx.filterNumeroWhatsapp})` : '';
  return [
    `üìú *Men√∫ Auditor√≠a*${filterInfo}`,
    '',
    '1Ô∏è‚É£  √öltimos 10 mensajes',
    '2Ô∏è‚É£  √öltimos 100 mensajes',
    '3Ô∏è‚É£  √öltimos 200 mensajes',
    '4Ô∏è‚É£  Exportar CSV mensajes',
    '5Ô∏è‚É£  Volver al men√∫ principal',
    '6Ô∏è‚É£  Establecer filtro por n√∫mero',
    '7Ô∏è‚É£  Limpiar filtro',
    '8Ô∏è‚É£  Siguiente p√°gina (100)',
    '9Ô∏è‚É£  Reset paginaci√≥n',
    '',
    'Env√≠a el n√∫mero de la opci√≥n.'
  ].join('\n');
}

// ---- Main handler ----
export async function handleIncomingMessage(client: Client, msg: Message) {
  audit('process_message', { from: msg.from, body: msg.body });
  const bodyTrim = msg.body.trim();
  const numero = msg.from.replace(/@c\.us$/, '');

  // Blacklist / attempt gating
  const blacklistRepo = AppDataSource.getRepository(Blacklist);
  const bl = await blacklistRepo.findOneBy({ numeroWhatsapp: numero });
  if (bl) return;
  const userRepo = AppDataSource.getRepository(Usuario);
  const attemptRepo = AppDataSource.getRepository(Attempt);
  let user = await userRepo.findOneBy({ numeroWhatsapp: numero });
  if (!user) {
    let attempt = await attemptRepo.findOneBy({ numeroWhatsapp: numero });
    if (!attempt) {
      attempt = attemptRepo.create({ numeroWhatsapp: numero, conteo: 1, ultimaActualizacion: new Date() as any });
    } else {
      attempt.conteo += 1;
      attempt.ultimaActualizacion = new Date() as any;
    }
    await attemptRepo.save(attempt);
    if (attempt.conteo >= ATTEMPT_THRESHOLD) {
      const newBl = blacklistRepo.create({ numeroWhatsapp: numero, activo: true });
      await blacklistRepo.save(newBl);
      await createAudit({ usuario: null, accion: 'blacklist_add', detalles: { numeroWhatsapp: numero, attempts: attempt.conteo } });
    } else {
      await createAudit({ usuario: null, accion: 'unregistered_attempt', detalles: { numeroWhatsapp: numero, attempt: attempt.conteo } });
    }
    return; // silencio para no revelar bot
  }
  const isAdmin = user.tipo === 'admin';

  const sendReply = async (text: string) => {
    const release = await globalMutex.lock();
    try {
      await client.sendMessage(msg.from, text);
    } finally {
      release();
    }
    try { await createAudit({ usuario: user, accion: 'msg_out', detalles: { body: text } }); } catch {}
  };

  if (bodyTrim === '!ping') {
    try { await createAudit({ usuario: user, accion: 'msg_in', detalles: { body: bodyTrim } }); } catch {}
    await client.sendMessage(msg.from, 'üèì pong');
    try { await createAudit({ usuario: user, accion: 'msg_out', detalles: { body: 'üèì pong' } }); } catch {}
    return;
  }

  // Log inbound
  try { await createAudit({ usuario: user, accion: 'msg_in', detalles: { body: bodyTrim } }); } catch {}

  // Audit context lifecycle
  await expireOldAuditCtx();
  const auditCtxRepo = AppDataSource.getRepository(AuditContext);
  let auditCtx = await auditCtxRepo.findOneBy({ adminNumeroWhatsapp: numero });
  if (auditCtx && auditCtx.lastInteraction && Date.now() - new Date(auditCtx.lastInteraction).getTime() > AUDIT_CONTEXT_TIMEOUT_MS) {
    await auditCtxRepo.remove(auditCtx);
    auditCtx = undefined as any;
  }

  // --- Global RESET command ---
  if (bodyTrim.toLowerCase() === 'reset') {
    try { if (auditCtx) await auditCtxRepo.remove(auditCtx); } catch {}
    blacklistMenuAdmins.delete(numero);
    blacklistRemovalAwait.delete(numero);
  userMenuAdmins.delete(numero);
  createUserStates.delete(numero);
  updateUserStates.delete(numero);
  deleteUserStates.delete(numero);
  searchUserStates.delete(numero);
  await sendReply('üîÑ Contextos reiniciados. Escribe "menu" para ver opciones.');
    return;
  }

  // Audit filter input state
  if (auditCtx && auditCtx.awaitingFilter) {
    if (/^\d{8,15}$/.test(bodyTrim)) {
      await updateAuditCtx(auditCtx, { filterNumeroWhatsapp: bodyTrim, awaitingFilter: false, offset: 0 });
      await sendReply('‚úÖ Filtro aplicado.');
      await sendReply(buildAuditMenu(auditCtx));
    } else if (bodyTrim === '0') {
      await updateAuditCtx(auditCtx, { awaitingFilter: false });
      await sendReply('Filtro cancelado.');
      await sendReply(buildAuditMenu(auditCtx));
    } else {
      await sendReply('Ingresa un n√∫mero v√°lido (8-15 d√≠gitos) o 0 para cancelar.');
    }
    return;
  }

  // --- Blacklist removal awaiting state ---
  if (blacklistRemovalAwait.has(numero)) {
    if (!isAdmin) {
      blacklistRemovalAwait.delete(numero);
      blacklistMenuAdmins.delete(numero);
      await sendReply('‚õî No autorizado.');
      return;
    }
    if (bodyTrim === '0') {
      blacklistRemovalAwait.delete(numero);
      await sendReply('Operaci√≥n cancelada.');
      await sendReply('*Men√∫ Blacklist*\n1Ô∏è‚É£ Listar\n2Ô∏è‚É£ Remover n√∫mero\n3Ô∏è‚É£ Volver');
      return;
    }
    if (/^\d{5,15}$/.test(bodyTrim)) {
      try {
        await removeFromBlacklist(bodyTrim);
        await sendReply('‚úÖ N√∫mero removido (si exist√≠a)');
      } catch (e: any) {
        await sendReply('‚ùå Error removiendo: ' + (e.message || '')); 
      }
    } else {
      await sendReply('Formato inv√°lido. Env√≠a solo d√≠gitos o 0 para cancelar.');
      return;
    }
    blacklistRemovalAwait.delete(numero);
    await sendReply('*Men√∫ Blacklist*\n1Ô∏è‚É£ Listar\n2Ô∏è‚É£ Remover n√∫mero\n3Ô∏è‚É£ Volver');
    return;
  }

  // --- User creation flow ---
  if (createUserStates.has(numero)) {
    if (!isAdmin) { createUserStates.delete(numero); userMenuAdmins.delete(numero); await sendReply('‚õî No autorizado.'); return; }
    const st = createUserStates.get(numero)!;
    const cancel = bodyTrim.toLowerCase() === 'cancelar' || bodyTrim === '0';
  if (cancel) { createUserStates.delete(numero); await sendReply('Operaci√≥n cancelada.'); await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver'); return; }
    if (st.step === 1) {
      if (!/^\d{8,15}$/.test(bodyTrim)) { await sendReply('N√∫mero inv√°lido. Debe tener 8-15 d√≠gitos.'); return; }
      const existing = await AppDataSource.getRepository(Usuario).findOneBy({ numeroWhatsapp: bodyTrim });
      if (existing) { await sendReply('Ese n√∫mero ya existe, ingresa otro.'); return; }
      st.numero = bodyTrim; st.step = 2; createUserStates.set(numero, st); await sendReply('üìõ Ingresa el nombre de usuario:'); return;
    }
    if (st.step === 2) {
      if (bodyTrim.length < 2) { await sendReply('Nombre muy corto.'); return; }
      st.nombre = bodyTrim; st.step = 3; createUserStates.set(numero, st); await sendReply('üëÆ ¬øSer√° usuario administrador? (si/no)'); return;
    }
    if (st.step === 3) {
      const ans = bodyTrim.toLowerCase();
      if (!['si','no','s√≠'].includes(ans)) { await sendReply('Responde si o no.'); return; }
      const tipo = (ans === 'si' || ans === 's√≠') ? UserType.ADMIN : UserType.NORMAL;
      try { await createUserManual(st.numero!, st.nombre!, tipo); await sendReply('‚úÖ Usuario creado.'); } catch(e:any){ await sendReply('‚ùå Error: '+ (e.message||'')); }
      createUserStates.delete(numero);
  await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
      return;
    }
  }

  // --- User update flow ---
  if (updateUserStates.has(numero)) {
    if (!isAdmin) { updateUserStates.delete(numero); userMenuAdmins.delete(numero); await sendReply('‚õî No autorizado.'); return; }
    const st = updateUserStates.get(numero)!;
    const cancel = bodyTrim.toLowerCase() === 'cancelar' || bodyTrim === '0';
  if (cancel) { updateUserStates.delete(numero); await sendReply('Operaci√≥n cancelada.'); await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver'); return; }
    if (st.phase === 'askNumero') {
      if (!/^\d{8,15}$/.test(bodyTrim)) { await sendReply('N√∫mero inv√°lido.'); return; }
      const existing = await AppDataSource.getRepository(Usuario).findOneBy({ numeroWhatsapp: bodyTrim });
      if (!existing) { await sendReply('No existe ese usuario. Ingresa otro o 0 para cancelar.'); return; }
      st.numero = bodyTrim; st.phase = 'attrMenu'; updateUserStates.set(numero, st);
      await sendReply('¬øQu√© deseas modificar?\n1Ô∏è‚É£ Nombre\n2Ô∏è‚É£ Rol\n3Ô∏è‚É£ Activo (toggle)\n4Ô∏è‚É£ Cancelar');
      return;
    }
    if (st.phase === 'attrMenu') {
      if (!/^[1-4]$/.test(bodyTrim)) { await sendReply('Selecciona 1-4.'); return; }
      const opt = parseInt(bodyTrim,10);
      if (opt === 5) { updateUserStates.delete(numero); await sendReply('Cancelado.'); await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver'); return; }
      if (opt === 1) { st.attr = 'nombre'; st.phase='attrValue'; updateUserStates.set(numero, st); await sendReply('Nuevo nombre:'); return; }
      if (opt === 2) { st.attr = 'rol'; st.phase='attrValue'; updateUserStates.set(numero, st); await sendReply('Nuevo rol (admin/normal):'); return; }
      if (opt === 3) { // toggle activo
        const repo = AppDataSource.getRepository(Usuario); const u = await repo.findOneBy({ numeroWhatsapp: st.numero! }); if (u){ await updateUser(u.numeroWhatsapp, { activo: !u.activo }); await sendReply(`Estado activo ahora: ${!u.activo}`); }
        updateUserStates.delete(numero); await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver'); return; }
      if (opt === 4) { st.attr='telefono'; st.phase='attrPhone'; updateUserStates.set(numero, st); await sendReply('Nuevo n√∫mero (8-15 d√≠gitos):'); return; }
    }
    if (st.phase === 'attrValue') {
      if (st.attr === 'nombre') {
        if (bodyTrim.length < 2) { await sendReply('Nombre muy corto.'); return; }
        await updateUser(st.numero!, { nombre: bodyTrim });
        await sendReply('Nombre actualizado.');
      } else if (st.attr === 'rol') {
        const v = bodyTrim.toLowerCase(); if (!['admin','normal'].includes(v)) { await sendReply('Valor inv√°lido. Usa admin o normal.'); return; }
        await updateUser(st.numero!, { tipo: v === 'admin' ? UserType.ADMIN : UserType.NORMAL });
        await sendReply('Rol actualizado.');
      }
      updateUserStates.delete(numero);
      await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
      return;
    }
    if (st.phase === 'attrPhone') {
      if (!/^\d{8,15}$/.test(bodyTrim)) { await sendReply('N√∫mero inv√°lido.'); return; }
      try { await updateUserPhone(st.numero!, bodyTrim); await sendReply('N√∫mero actualizado.'); } catch(e:any){ await sendReply('‚ùå Error: '+(e.message||'')); }
      updateUserStates.delete(numero);
      await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
      return;
    }
  }

  // --- User delete flow ---
  if (deleteUserStates.has(numero)) {
    if (!isAdmin) { deleteUserStates.delete(numero); userMenuAdmins.delete(numero); await sendReply('‚õî No autorizado.'); return; }
    const st = deleteUserStates.get(numero)!;
    const cancel = bodyTrim.toLowerCase() === 'cancelar' || bodyTrim === '0';
  if (cancel) { deleteUserStates.delete(numero); await sendReply('Operaci√≥n cancelada.'); await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver'); return; }
    if (st.step === 1) {
      if (!/^\d{8,15}$/.test(bodyTrim)) { await sendReply('N√∫mero inv√°lido.'); return; }
      const existing = await AppDataSource.getRepository(Usuario).findOneBy({ numeroWhatsapp: bodyTrim });
      if (!existing) { await sendReply('No existe ese usuario. Ingresa otro o 0 para cancelar.'); return; }
      st.numero = bodyTrim; st.step = 2; deleteUserStates.set(numero, st); await sendReply('Confirma eliminaci√≥n (si/no):'); return;
    }
    if (st.step === 2) {
      const ans = bodyTrim.toLowerCase();
      if (!['si','no','s√≠'].includes(ans)) { await sendReply('Responde si o no.'); return; }
      if (ans === 'si' || ans === 's√≠') {
        try { await deleteUser(st.numero!); await sendReply('‚úÖ Usuario eliminado.'); } catch (e:any) { await sendReply('‚ùå Error: '+(e.message||'')); }
      } else { await sendReply('Eliminaci√≥n cancelada.'); }
      deleteUserStates.delete(numero);
  await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
      return;
    }
  }

  // --- Blacklist interactive menu ---
  if (blacklistMenuAdmins.has(numero)) {
    if (!isAdmin) { // seguridad extra
      blacklistMenuAdmins.delete(numero);
      await sendReply('‚õî No autorizado.');
      return;
    }
    if (/^[123]$/.test(bodyTrim)) {
      const opt = parseInt(bodyTrim, 10);
      if (opt === 1) {
        const list = await listBlacklist();
        const lines = list.map(b => b.numeroWhatsapp + (b.activo ? '' : ' (inactivo)'));
        await sendReply(lines.length ? '*Blacklist*\n' + lines.join('\n') : 'Blacklist vac√≠a');
      } else if (opt === 2) {
        blacklistRemovalAwait.add(numero);
        await sendReply('Env√≠a el n√∫mero a remover o 0 para cancelar.');
        return;
      } else if (opt === 3) {
        blacklistMenuAdmins.delete(numero);
        await sendReply(buildMenu(isAdmin));
        return;
      }
      // after 1 keep menu
      if (opt === 1) await sendReply('*Men√∫ Blacklist*\n1Ô∏è‚É£ Listar\n2Ô∏è‚É£ Remover n√∫mero\n3Ô∏è‚É£ Volver');
      return;
    } else {
      await sendReply('Opci√≥n inv√°lida. Usa 1,2,3.');
      return;
    }
  }

  // Audit interactive numeric mode
  if (auditCtx && auditMenuActive.has(numero) && /^[1-9]$/.test(bodyTrim)) {
    const choice = parseInt(bodyTrim, 10);
    const auditRepo = AppDataSource.getRepository(Auditoria);
    const fetchLimit = 1500; // window
    const rows = await auditRepo.find({ order: { id: 'DESC' }, take: fetchLimit, relations: ['usuario'] });
    let filtered = rows.filter(r => r.accion === 'msg_in' || r.accion === 'msg_out');
    if (auditCtx?.filterNumeroWhatsapp) {
      const target = auditCtx.filterNumeroWhatsapp; // local to assure not null
      filtered = filtered.filter(r => r.usuario?.numeroWhatsapp === target);
    }
    const pageSize = 100;
    if (choice >=1 && choice <=3) {
      const mapChoice: Record<number, number> = {1:10,2:100,3:200};
      const slice = filtered.slice(0, mapChoice[choice]);
      const lines = slice.map(r => `${r.id} ${r.accion === 'msg_in' ? '>>' : '<<'} ${r.detalles?.body || ''}`);
      await sendReply(lines.join('\n') || 'Sin mensajes');
    } else if (choice === 4) {
      const header = 'id,tipo,numero,fecha,body';
      const csvLines = filtered.map(r => {
        const body = (r.detalles?.body || '').replace(/"/g,'""');
        return `${r.id},${r.accion},${r.usuario?.numeroWhatsapp || ''},${r.fechaHora.toISOString()},"${body}"`;
      });
      const csv = [header, ...csvLines].join('\n');
      const media = new MessageMedia('text/csv', Buffer.from(csv).toString('base64'), 'mensajes.csv');
      const release = await globalMutex.lock();
      try {
        await client.sendMessage(msg.from, media);
      } finally { release(); }
      try { await createAudit({ usuario: user, accion: 'msg_out', detalles: { body: '[CSV mensajes enviado]' } }); } catch {}
    } else if (choice === 5) {
      await auditCtxRepo.remove(auditCtx);
  auditMenuActive.delete(numero);
      await sendReply(buildMenu(isAdmin));
      return;
    } else if (choice === 6) {
      await updateAuditCtx(auditCtx, { awaitingFilter: true });
      await sendReply('Ingresa el n√∫mero a filtrar (solo d√≠gitos) o 0 para cancelar.');
    } else if (choice === 7) {
      await updateAuditCtx(auditCtx, { filterNumeroWhatsapp: null as any, offset: 0 });
      await sendReply('Filtro limpiado.');
    } else if (choice === 8) {
      const newOffset = (auditCtx.offset || 0) + pageSize;
      const page = filtered.slice(newOffset, newOffset + pageSize);
      if (!page.length) {
        await sendReply('No hay m√°s p√°ginas.');
      } else {
        await updateAuditCtx(auditCtx, { offset: newOffset });
        const lines = page.map(r => `${r.id} ${r.accion === 'msg_in' ? '>>' : '<<'} ${r.detalles?.body || ''}`);
        await sendReply(lines.join('\n'));
      }
    } else if (choice === 9) {
      await updateAuditCtx(auditCtx, { offset: 0 });
      await sendReply('Paginaci√≥n reiniciada.');
    } else {
      await sendReply('Opci√≥n inv√°lida.');
    }
    if (choice !==5) await sendReply(buildAuditMenu(auditCtx));
    return;
  }

  // User admin commands
  if (bodyTrim.startsWith('!usuario') && isAdmin) {
    const parts = bodyTrim.split(/\s+/).slice(1);
    const action = parts[0];
    try {
      if (action === 'alta') {
        const numeroNuevo = parts[1];
        const nombreNuevo = parts[2];
        const rol = parts[3];
        if (!numeroNuevo || !nombreNuevo || !rol) throw new Error('Uso: !usuario alta <numero> <nombre> <admin|normal>');
        const tipo = rol === 'admin' ? UserType.ADMIN : UserType.NORMAL;
        await createUserManual(numeroNuevo, nombreNuevo, tipo);
  const release2 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, '‚úÖ Usuario creado'); } finally { release2(); }
      } else if (action === 'listar') {
        const usuarios = await listUsers();
        const lines = usuarios.map(u => `${u.numeroWhatsapp} | ${u.nombre} | ${u.tipo} | ${u.activo ? 'activo' : 'inactivo'}`);
  const release3 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, lines.length ? lines.join('\n') : 'No hay usuarios'); } finally { release3(); }
      } else if (action === 'actualizar') {
        const numeroTarget = parts[1];
        if (!numeroTarget) throw new Error('Uso: !usuario actualizar <numero> [nombre=..] [rol=admin|normal] [activo=true|false]');
        const updates: any = {};
        for (const token of parts.slice(2)) {
          const [k, v] = token.split('=');
          if (k === 'nombre') updates.nombre = v;
          if (k === 'rol') updates.tipo = v === 'admin' ? UserType.ADMIN : UserType.NORMAL;
          if (k === 'activo') updates.activo = v === 'true';
        }
        await updateUser(numeroTarget, updates);
  const release4 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, '‚úÖ Usuario actualizado'); } finally { release4(); }
      } else if (action === 'borrar') {
        const numeroTarget = parts[1];
        if (!numeroTarget) throw new Error('Uso: !usuario borrar <numero>');
        await deleteUser(numeroTarget);
  const release5 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, '‚úÖ Usuario borrado'); } finally { release5(); }
      } else {
  const release6 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, buildUserAdminHelp()); } finally { release6(); }
      }
    } catch (e: any) {
  const releaseErr = await globalMutex.lock();
  try { await client.sendMessage(msg.from, `‚ùå ${e.message}`); } finally { releaseErr(); }
    }
    return;
  }

  // Blacklist commands
  if (bodyTrim.startsWith('!blacklist') && isAdmin) {
    const parts = bodyTrim.split(/\s+/).slice(1);
    const action = parts[0];
    try {
      if (action === 'listar') {
        const list = await listBlacklist();
        const lines = list.map(b => b.numeroWhatsapp);
  const release7 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, lines.length ? '*Blacklist*\n' + lines.join('\n') : 'Blacklist vac√≠a'); } finally { release7(); }
      } else if (action === 'remover') {
        const numeroTarget = parts[1];
        if (!numeroTarget) throw new Error('Uso: !blacklist remover <numero>');
        await removeFromBlacklist(numeroTarget);
  const release8 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, '‚úÖ N√∫mero removido del blacklist'); } finally { release8(); }
      } else {
  const release9 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, 'Comandos: !blacklist listar | !blacklist remover <numero>'); } finally { release9(); }
      }
    } catch (e: any) {
      await client.sendMessage(msg.from, `‚ùå ${e.message}`);
    }
    return;
  }

  // Menu trigger
  if (MENU_TRIGGER_REGEX.test(bodyTrim)) {
    // Al abrir men√∫ principal limpiamos contextos secundarios para evitar confusi√≥n
    if (auditCtx) {
      const repo = AppDataSource.getRepository(AuditContext);
      try { await repo.remove(auditCtx); } catch {}
    }
    blacklistMenuAdmins.delete(numero);
    blacklistRemovalAwait.delete(numero);
  userMenuAdmins.delete(numero);
  createUserStates.delete(numero);
  updateUserStates.delete(numero);
  deleteUserStates.delete(numero);
  searchUserStates.delete(numero);
  auditMenuActive.delete(numero);
    await sendReply(buildMenu(isAdmin));
    return;
  }

  // Main numeric menu (solo si NO estamos en submen√∫s/flows)
  const inAnyUserFlow = userMenuAdmins.has(numero) || createUserStates.has(numero) || updateUserStates.has(numero) || deleteUserStates.has(numero) || searchUserStates.has(numero);
  const inBlacklistFlow = blacklistMenuAdmins.has(numero) || blacklistRemovalAwait.has(numero);
  const inAuditFlow = auditMenuActive.has(numero) || (auditCtx && auditCtx.awaitingFilter);
  if (!inAnyUserFlow && !inBlacklistFlow && !inAuditFlow && /^([1-9]|10)$/.test(bodyTrim)) {
    const option = parseInt(bodyTrim, 10);
    switch (option) {
      case 1: {
  const releaseOpen = await globalMutex.lock();
  try { await client.sendMessage(msg.from, 'üöó Solicitando apertura de port√≥n de visitas...'); } finally { releaseOpen(); }
        const res = await openDoor('visits');
  const releaseOpen2 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, res.ok ? '‚úÖ Apertura de visitas procesada.' : res.message); } finally { releaseOpen2(); }
        return; }
      case 2: {
  const releaseOpen3 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, 'üö∂ Solicitando apertura de port√≥n peatonal...'); } finally { releaseOpen3(); }
        const res = await openDoor('pedestrian');
  const releaseOpen4 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, res.ok ? '‚úÖ Apertura peatonal procesada.' : res.message); } finally { releaseOpen4(); }
        return; }
      case 3: {
  const releaseSnapStart = await globalMutex.lock();
  try { await client.sendMessage(msg.from, 'üñºÔ∏è Capturando imagen del port√≥n de visitas...'); } finally { releaseSnapStart(); }
        const snap = await getGateSnapshot('visits');
        if (snap.ok && snap.buffer) {
          const media = new MessageMedia('image/jpeg', snap.buffer.toString('base64'), 'visitas.jpg');
          const releaseSnapSend = await globalMutex.lock();
          try { await client.sendMessage(msg.from, media, { caption: 'Port√≥n visitas' }); } finally { releaseSnapSend(); }
        } else {
          const releaseSnapFail = await globalMutex.lock();
          try { await client.sendMessage(msg.from, snap.message || '‚ùå No se obtuvo imagen.'); } finally { releaseSnapFail(); }
        }
        return; }
      case 4: {
  const releaseSnapStart2 = await globalMutex.lock();
  try { await client.sendMessage(msg.from, 'üñºÔ∏è Capturando imagen del port√≥n peatonal...'); } finally { releaseSnapStart2(); }
        const snap = await getGateSnapshot('pedestrian');
        if (snap.ok && snap.buffer) {
          const media = new MessageMedia('image/jpeg', snap.buffer.toString('base64'), 'peatonal.jpg');
          const releaseSnapSend2 = await globalMutex.lock();
          try { await client.sendMessage(msg.from, media, { caption: 'Port√≥n peatonal' }); } finally { releaseSnapSend2(); }
        } else {
          const releaseSnapFail2 = await globalMutex.lock();
          try { await client.sendMessage(msg.from, snap.message || '‚ùå No se obtuvo imagen.'); } finally { releaseSnapFail2(); }
        }
        return; }
      case 5: {
        const mem = (process.memoryUsage().rss / 1024 / 1024).toFixed(1);
        const uptime = Math.floor(process.uptime());
        await sendReply(`üìä *Estatus del sistema*\nüïí Uptime: ${uptime}s\nüß† Memoria RSS: ${mem} MB`);
        return; }
      case 6:
        if (!isAdmin) { await sendReply('‚õî No autorizado.'); return; }
  userMenuAdmins.add(numero);
  await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
        return;
      case 7:
        if (!isAdmin) { await sendReply('‚õî No autorizado.'); return; }
        auditCtx = await getOrCreateAuditCtx(numero);
  auditMenuActive.add(numero);
        await sendReply(buildAuditMenu(auditCtx));
        return;
      case 8:
        if (!isAdmin) { await sendReply('‚õî No autorizado.'); return; }
        blacklistMenuAdmins.add(numero);
        await sendReply('*Men√∫ Blacklist*\n1Ô∏è‚É£ Listar\n2Ô∏è‚É£ Remover n√∫mero\n3Ô∏è‚É£ Volver');
        return;
      case 9: {
        if (!isAdmin) { await sendReply('‚õî No autorizado.'); return; }
        const rel1 = await globalMutex.lock();
        try { await client.sendMessage(msg.from, 'üñºÔ∏è Capturando imagen de c√°mara frontal...'); } finally { rel1(); }
        const snap = await getFrontDoorSnapshot();
        if (snap.ok && snap.buffer) {
          const media = new MessageMedia('image/jpeg', snap.buffer.toString('base64'), 'front-door.jpg');
          const rel2 = await globalMutex.lock();
          try { await client.sendMessage(msg.from, media, { caption: 'C√°mara frontal' }); } finally { rel2(); }
        } else {
          await sendReply(snap.message || '‚ùå No se obtuvo imagen.');
        }
        return; }
      case 10: {
        if (!isAdmin) { await sendReply('‚õî No autorizado.'); return; }
        const rel3 = await globalMutex.lock();
        try { await client.sendMessage(msg.from, 'üé• Grabando clip de 30s de la c√°mara frontal, espera...'); } finally { rel3(); }
        try {
          const clip = await getFrontDoorClip(30);
          if (clip.ok && clip.buffer) {
            const media = new MessageMedia('video/mp4', clip.buffer.toString('base64'), 'front-door-30s.mp4');
            const rel4 = await globalMutex.lock();
            try {
              await client.sendMessage(msg.from, media, { sendMediaAsDocument: true, caption: 'C√°mara frontal (30s)' });
            } finally { rel4(); }
          } else {
            await sendReply(clip.message || '‚ùå No se pudo generar el video.');
          }
        } catch (e:any) {
          await sendReply('‚ùå Fall√≥ el env√≠o del video. Intentar√© con menor calidad.');
          const clip2 = await getFrontDoorClip(20);
          if (clip2.ok && clip2.buffer) {
            const media2 = new MessageMedia('video/mp4', clip2.buffer.toString('base64'), 'front-door.mp4');
            const rel5 = await globalMutex.lock();
            try { await client.sendMessage(msg.from, media2, { sendMediaAsDocument: true, caption: 'C√°mara frontal' }); } finally { rel5(); }
          } else {
            await sendReply(clip2.message || '‚ùå No se pudo enviar el video.');
          }
        }
        return; }
    }
  }

  // --- User management menu numeric handling ---
  if (userMenuAdmins.has(numero)) {
    if (!isAdmin) { userMenuAdmins.delete(numero); await sendReply('‚õî No autorizado.'); return; }
    // b√∫squeda en curso
    if (searchUserStates.has(numero)) {
      if (bodyTrim === '0' || bodyTrim.toLowerCase() === 'cancelar') { searchUserStates.delete(numero); await sendReply('B√∫squeda cancelada.'); await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver'); return; }
      const results = await searchUsers(bodyTrim);
      const lines = results.map(u => `${u.numeroWhatsapp} | ${u.nombre} | ${u.tipo} | ${u.activo?'activo':'inactivo'}`);
      await sendReply(lines.length? lines.join('\n') : 'Sin coincidencias');
      searchUserStates.delete(numero);
      await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
      return;
    }
    if (/^[1-6]$/.test(bodyTrim)) {
      const opt = parseInt(bodyTrim,10);
      switch(opt){
        case 1:
          createUserStates.set(numero, { step:1 });
          await sendReply('üìû Ingresa el n√∫mero de tel√©fono (solo d√≠gitos) o 0 para cancelar:');
          return;
        case 2: {
          const usuarios = await listUsers();
          const lines = usuarios.map(u => `${u.numeroWhatsapp} | ${u.nombre} | ${u.tipo} | ${u.activo?'activo':'inactivo'}`);
          await sendReply(lines.length? lines.join('\n') : 'No hay usuarios');
          await sendReply('*Gesti√≥n Usuarios*\n1Ô∏è‚É£ Crear\n2Ô∏è‚É£ Listar\n3Ô∏è‚É£ Actualizar\n4Ô∏è‚É£ Borrar\n5Ô∏è‚É£ Buscar\n6Ô∏è‚É£ Volver');
          return; }
        case 3:
          updateUserStates.set(numero, { phase:'askNumero' });
          await sendReply('Ingresa el n√∫mero del usuario a actualizar o 0 para cancelar:');
          return;
        case 4:
          deleteUserStates.set(numero, { step:1 });
          await sendReply('Ingresa el n√∫mero del usuario a borrar o 0 para cancelar:');
          return;
        case 5:
          searchUserStates.set(numero, { phase:'askQuery' });
          await sendReply('üîç Ingresa texto / n√∫mero a buscar (0 cancelar):');
          return;
        case 6:
          userMenuAdmins.delete(numero);
          await sendReply(buildMenu(isAdmin));
          return;
      }
    } else {
      // If it's part of ongoing sub-flows they are handled earlier; else invalid option
      if (!createUserStates.has(numero) && !updateUserStates.has(numero) && !deleteUserStates.has(numero) && !searchUserStates.has(numero)) {
        await sendReply('Opci√≥n inv√°lida. Usa 1-6.');
      }
      return;
    }
  }
}
